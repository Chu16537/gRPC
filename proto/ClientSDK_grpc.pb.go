// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ClientSDK

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameControllerClient is the client API for GameController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameControllerClient interface {
	Unary(ctx context.Context, in *UnaryReq, opts ...grpc.CallOption) (*UnaryRes, error)
	TestStreamServer(ctx context.Context, in *ServerStreamReq, opts ...grpc.CallOption) (GameController_TestStreamServerClient, error)
	TestStreamClient(ctx context.Context, opts ...grpc.CallOption) (GameController_TestStreamClientClient, error)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (GameController_BidirectionalStreamClient, error)
}

type gameControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameControllerClient(cc grpc.ClientConnInterface) GameControllerClient {
	return &gameControllerClient{cc}
}

func (c *gameControllerClient) Unary(ctx context.Context, in *UnaryReq, opts ...grpc.CallOption) (*UnaryRes, error) {
	out := new(UnaryRes)
	err := c.cc.Invoke(ctx, "/ClientSDK.GameController/unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameControllerClient) TestStreamServer(ctx context.Context, in *ServerStreamReq, opts ...grpc.CallOption) (GameController_TestStreamServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameController_ServiceDesc.Streams[0], "/ClientSDK.GameController/testStreamServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameControllerTestStreamServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameController_TestStreamServerClient interface {
	Recv() (*ServerStreamRes, error)
	grpc.ClientStream
}

type gameControllerTestStreamServerClient struct {
	grpc.ClientStream
}

func (x *gameControllerTestStreamServerClient) Recv() (*ServerStreamRes, error) {
	m := new(ServerStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameControllerClient) TestStreamClient(ctx context.Context, opts ...grpc.CallOption) (GameController_TestStreamClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameController_ServiceDesc.Streams[1], "/ClientSDK.GameController/testStreamClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameControllerTestStreamClientClient{stream}
	return x, nil
}

type GameController_TestStreamClientClient interface {
	Send(*ClientStreamReq) error
	CloseAndRecv() (*ClientStreamRes, error)
	grpc.ClientStream
}

type gameControllerTestStreamClientClient struct {
	grpc.ClientStream
}

func (x *gameControllerTestStreamClientClient) Send(m *ClientStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameControllerTestStreamClientClient) CloseAndRecv() (*ClientStreamRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameControllerClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (GameController_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameController_ServiceDesc.Streams[2], "/ClientSDK.GameController/bidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameControllerBidirectionalStreamClient{stream}
	return x, nil
}

type GameController_BidirectionalStreamClient interface {
	Send(*BidirectionalStreamReq) error
	Recv() (*BidirectionalStreamRes, error)
	grpc.ClientStream
}

type gameControllerBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *gameControllerBidirectionalStreamClient) Send(m *BidirectionalStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameControllerBidirectionalStreamClient) Recv() (*BidirectionalStreamRes, error) {
	m := new(BidirectionalStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameControllerServer is the server API for GameController service.
// All implementations must embed UnimplementedGameControllerServer
// for forward compatibility
type GameControllerServer interface {
	Unary(context.Context, *UnaryReq) (*UnaryRes, error)
	TestStreamServer(*ServerStreamReq, GameController_TestStreamServerServer) error
	TestStreamClient(GameController_TestStreamClientServer) error
	BidirectionalStream(GameController_BidirectionalStreamServer) error
	// mustEmbedUnimplementedGameControllerServer()
}

// UnimplementedGameControllerServer must be embedded to have forward compatible implementations.
type UnimplementedGameControllerServer struct {
}

func (UnimplementedGameControllerServer) Unary(context.Context, *UnaryReq) (*UnaryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedGameControllerServer) TestStreamServer(*ServerStreamReq, GameController_TestStreamServerServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamServer not implemented")
}
func (UnimplementedGameControllerServer) TestStreamClient(GameController_TestStreamClientServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamClient not implemented")
}
func (UnimplementedGameControllerServer) BidirectionalStream(GameController_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedGameControllerServer) mustEmbedUnimplementedGameControllerServer() {}

// UnsafeGameControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameControllerServer will
// result in compilation errors.
type UnsafeGameControllerServer interface {
	mustEmbedUnimplementedGameControllerServer()
}

func RegisterGameControllerServer(s grpc.ServiceRegistrar, srv GameControllerServer) {
	s.RegisterService(&GameController_ServiceDesc, srv)
}

func _GameController_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameControllerServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientSDK.GameController/unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameControllerServer).Unary(ctx, req.(*UnaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameController_TestStreamServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameControllerServer).TestStreamServer(m, &gameControllerTestStreamServerServer{stream})
}

type GameController_TestStreamServerServer interface {
	Send(*ServerStreamRes) error
	grpc.ServerStream
}

type gameControllerTestStreamServerServer struct {
	grpc.ServerStream
}

func (x *gameControllerTestStreamServerServer) Send(m *ServerStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func _GameController_TestStreamClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameControllerServer).TestStreamClient(&gameControllerTestStreamClientServer{stream})
}

type GameController_TestStreamClientServer interface {
	SendAndClose(*ClientStreamRes) error
	Recv() (*ClientStreamReq, error)
	grpc.ServerStream
}

type gameControllerTestStreamClientServer struct {
	grpc.ServerStream
}

func (x *gameControllerTestStreamClientServer) SendAndClose(m *ClientStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameControllerTestStreamClientServer) Recv() (*ClientStreamReq, error) {
	m := new(ClientStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GameController_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameControllerServer).BidirectionalStream(&gameControllerBidirectionalStreamServer{stream})
}

type GameController_BidirectionalStreamServer interface {
	Send(*BidirectionalStreamRes) error
	Recv() (*BidirectionalStreamReq, error)
	grpc.ServerStream
}

type gameControllerBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *gameControllerBidirectionalStreamServer) Send(m *BidirectionalStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameControllerBidirectionalStreamServer) Recv() (*BidirectionalStreamReq, error) {
	m := new(BidirectionalStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameController_ServiceDesc is the grpc.ServiceDesc for GameController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientSDK.GameController",
	HandlerType: (*GameControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "unary",
			Handler:    _GameController_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "testStreamServer",
			Handler:       _GameController_TestStreamServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "testStreamClient",
			Handler:       _GameController_TestStreamClient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "bidirectionalStream",
			Handler:       _GameController_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ClientSDK.proto",
}
